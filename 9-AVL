#include<iostream>
using namespace std;

class Node {
public:
    string key, meaning;
    Node *left, *right;
    int height;
    Node(string k, string m) {
        key = k; meaning = m;
        left = right = NULL;
        height = 1;
    }
};

class AVL {
    Node* root;
public:
    AVL() { root = NULL; }

    int getHeight(Node* n) {
        return n ? n->height : 0;
    }

    int getBalance(Node* n) {
        return n ? getHeight(n->left) - getHeight(n->right) : 0;
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;
        x->right = y;
        y->left = T2;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;
        y->left = x;
        x->right = T2;
        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
        return y;
    }

    Node* insert(Node* node, string key, string meaning) {
        if (!node) return new Node(key, meaning);
        if (key < node->key)
            node->left = insert(node->left, key, meaning);
        else if (key > node->key)
            node->right = insert(node->right, key, meaning);
        else {
            cout << "Keyword already exists, updating meaning.\n";
            node->meaning = meaning;
            return node;
        }
        
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        int balance = getBalance(node);
        
        if (balance > 1 && key < node->left->key)
            return rightRotate(node);
        if (balance < -1 && key > node->right->key)
            return leftRotate(node);
        if (balance > 1 && key > node->left->key) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
        if (balance < -1 && key < node->right->key) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
        return node;
    }

    void insertWord() {
        string k, m;
        cout << "Enter keyword: ";
        cin >> k;
        cout << "Enter meaning: ";
        cin >> m;
        root = insert(root, k, m);
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left)
            current = current->left;
        return current;
    }

    Node* deleteNode(Node* root, string key) {
        if (!root) return root;
        if (key < root->key)
            root->left = deleteNode(root->left, key);
        else if (key > root->key)
            root->right = deleteNode(root->right, key);
        else {
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                if (!temp) {
                    temp = root;
                    root = NULL;
                } else
                    *root = *temp;
                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->key = temp->key;
                root->meaning = temp->meaning;
                root->right = deleteNode(root->right, temp->key);
            }
        }
        if (!root) return root;
        root->height = 1 + max(getHeight(root->left), getHeight(root->right));
        int balance = getBalance(root);
        
        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);
        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }
        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);
        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }
        return root;
    }

    void deleteWord() {
        string key;
        cout << "Enter keyword to delete: ";
        cin >> key;
        root = deleteNode(root, key);
    }

    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->key << ": " << root->meaning << endl;
            inorder(root->right);
        }
    }

    void reverseInorder(Node* root) {
        if (root) {
            reverseInorder(root->right);
            cout << root->key << ": " << root->meaning << endl;
            reverseInorder(root->left);
        }
    }

    void displayAscending() {
        cout << "\nDictionary (Ascending Order):\n";
        inorder(root);
    }

    void displayDescending() {
        cout << "\nDictionary (Descending Order):\n";
        reverseInorder(root);
    }

    bool search(Node* root, string key) {
        if (!root) return false;
        if (key == root->key) return true;
        if (key < root->key)
            return search(root->left, key);
        else
            return search(root->right, key);
    }

    void searchWord() {
        string key;
        cout << "Enter keyword to search: ";
        cin >> key;
        if (search(root, key))
            cout << "Keyword found!\n";
        else
            cout << "Keyword not found.\n";
    }

    void maxComparisons() {
        int h = getHeight(root);
        cout << "\nMaximum comparisons needed: " << h << endl;
    }
};

int main() {
    AVL dict;
    int choice;
    char cont;
    do {
        cout << "\n==== Dictionary Menu ====";
        cout << "\n1. Insert keyword";
        cout << "\n2. Delete keyword";
        cout << "\n3. Display ascending order";
        cout << "\n4. Display descending order";
        cout << "\n5. Search keyword";
        cout << "\n6. Maximum comparisons";
        cout << "\nEnter choice: ";
        cin >> choice;
        switch (choice) {
            case 1: dict.insertWord(); break;
            case 2: dict.deleteWord(); break;
            case 3: dict.displayAscending(); break;
            case 4: dict.displayDescending(); break;
            case 5: dict.searchWord(); break;
            case 6: dict.maxComparisons(); break;
            default: cout << "Invalid choice!";
        }
        cout << "\nContinue? (y/n): ";
        cin >> cont;
    } while (cont == 'y' || cont == 'Y');
    return 0;
}

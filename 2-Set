/*To create ADT that implements the SET concept.
a. Add (newElement) -Place a value into the set
b. Remove (element) Remove the value
c. Contains (element) Return true if element is in collection
d. Size () Return number of values in collection Iterator () Return an iterator used to loop
over collection
e. Intersection of two sets
f. Union of two sets
g. Difference between two sets
h.Subset*/

#include <iostream>
#include <list>
#include <algorithm> // For find()
#include <cstdlib>
using namespace std;

class Set {
private:
    int num, flag = 1;
public:
    list<int> l, l1, u, I, d;
    list<int>::iterator t, t1, t2, t3, t4;
    
    void add();
    void delete1(int);
    void search(int);
    void display();
    void union1();
    void Intersection();
    void insert();
    void Difference();
    void size();
    void subset();
};

void Set::insert() {
    int n, m;
    cout << "\nSET A:\n";
    cout << "How many Elements you want to Add in Set A:\n";
    cin >> n;
    cout << "Enter Elements\n";
    for (int i = 0; i < n; i++) {
        cin >> num;
        l.push_back(num);
    }
    cout << "\nSET B:\n";
    cout << "How many Elements you want to Add in Set B:\n";
    cin >> m;
    cout << "Enter Elements\n";
    for (int i = 0; i < m; i++) {
        cin >> num;
        l1.push_back(num);
    }
}

void Set::add() {
    char c;
    cout << "In which Set do you want to Add Element (A/B): ";
    cin >> c;
    cout << "Enter Element: ";
    cin >> num;
    if (c == 'A' || c == 'a') {
        l.push_back(num);
        cout << "\nElement Inserted into Set A\n";
    } else if (c == 'B' || c == 'b') {
        l1.push_back(num);
        cout << "\nElement Inserted into Set B\n";
    } else {
        cout << "Invalid Set!!!";
    }
}

void Set::display() {
    cout << "\nThe Elements for Set A:\n{\t";
    for (t = l.begin(); t != l.end(); t++) {
        cout << *t << "\t";
    }
    cout << "}\n";

    cout << "\nThe Elements for Set B:\n{\t";
    for (t1 = l1.begin(); t1 != l1.end(); t1++) {
        cout << *t1 << "\t";
    }
    cout << "}\n";
}

void Set::search(int key) {
    flag = 0;
    for (t = l.begin(); t != l.end(); t++) {
        if (*t == key) {
            cout << "The Element is Present in Set A\n";
            flag = 1;
            return;
        }
    }
    for (t1 = l1.begin(); t1 != l1.end(); t1++) {
        if (*t1 == key) {
            cout << "The Element is Present in Set B\n";
            flag = 1;
            return;
        }
    }
    cout << "The Element is not Present\n";
}

void Set::delete1(int key) {
    if (l.empty() && l1.empty()) {
        cout << "The Set A & Set B are Empty\n";
    } else {
        search(key);
        if (flag == 1) {
            l.remove(key);
            l1.remove(key);
            cout << "Element Deleted\n";
        } else {
            cout << "Element not Deleted\n";
        }
    }
}

void Set::union1() {
    u.clear();
    int flag = 0;
    for (t = l.begin(); t != l.end(); t++) {
        u.push_back(*t);
    }
    for (t1 = l1.begin(); t1 != l1.end(); t1++) {
        flag = 1;
        for (t2 = u.begin(); t2 != u.end(); t2++) {
            if (*t1 == *t2) {
                flag = 0;
                break;
            }
        }
        if (flag == 1) {
            u.push_back(*t1);
        }
    }

    cout << "\nThe Union Set of A & B is : {\t";
    for (t2 = u.begin(); t2 != u.end(); t2++) {
        cout << *t2 << "\t";
    }
    cout << "}\n";
}

void Set::Intersection() {
    I.clear();
    for (t = l.begin(); t != l.end(); t++) {
        for (t1 = l1.begin(); t1 != l1.end(); t1++) {
            if (*t == *t1) {
                I.push_back(*t);
                break;
            }
        }
    }
    if (I.empty()) {
        cout << "\nThere is no Common element in Set A & Set B\n";
    } else {
        cout << "\nThe Intersection Set of A & B is : {\t";
        for (t3 = I.begin(); t3 != I.end(); t3++) {
            cout << *t3 << "\t";
        }
        cout << "}\n";
    }
}

void Set::Difference() {
    d.clear();
    int flag = 0;
    for (t = l.begin(); t != l.end(); t++) {
        flag = 1;
        for (t1 = l1.begin(); t1 != l1.end(); t1++) {
            if (*t == *t1) {
                flag = 0;
                break;
            }
        }
        if (flag == 1) {
            d.push_back(*t);
        }
    }
    if (d.empty()) {
        cout << "\nThere is no Difference (Sets are Equal)\n";
    } else {
        cout << "\nThe Difference Set of A - B is : {\t";
        for (t4 = d.begin(); t4 != d.end(); t4++) {
            cout << *t4 << "\t";
        }
        cout << "}\n";
    }
}

void Set::size() {
    char c;
    cout << "For which Set do you want Size? (A/B): ";
    cin >> c;
    if (c == 'A' || c == 'a') {
        cout << "Size of Set A: " << l.size() << endl;
    } else if (c == 'B' || c == 'b') {
        cout << "Size of Set B: " << l1.size() << endl;
    } else {
        cout << "Invalid Set!!!" << endl;
    }
}

void Set::subset() {
    bool isSubset = true;
    char c;
    cout << "Check if (A subset of B) or (B subset of A)? Enter (A/B): ";
    cin >> c;

    if (c == 'A' || c == 'a') {
        for (t = l.begin(); t != l.end(); t++) {
            if (find(l1.begin(), l1.end(), *t) == l1.end()) {
                isSubset = false;
                break;
            }
        }
        if (isSubset)
            cout << "Set A is a subset of Set B.\n";
        else
            cout << "Set A is NOT a subset of Set B.\n";
    } else if (c == 'B' || c == 'b') {
        for (t1 = l1.begin(); t1 != l1.end(); t1++) {
            if (find(l.begin(), l.end(), *t1) == l.end()) {
                isSubset = false;
                break;
            }
        }
        if (isSubset)
            cout << "Set B is a subset of Set A.\n";
        else
            cout << "Set B is NOT a subset of Set A.\n";
    } else {
        cout << "Invalid Choice!\n";
    }
}

int main() {
    Set s;
    int ch, key;
    s.insert();
    while (1) {
        cout << "\n\n-----------------------------\n";
        cout << "Set Theory Operations\n";
        cout << "-----------------------------\n";
        cout << "1. Add Element\n";
        cout << "2. Delete Element\n";
        cout << "3. Search Element\n";
        cout << "4. Display Sets\n";
        cout << "5. Union of Sets\n";
        cout << "6. Intersection of Sets\n";
        cout << "7. Difference of Sets (A - B)\n";
        cout << "8. Size of Set\n";
        cout << "9. Subset Check\n";
        cout << "10. Exit\n";
        cout << "Enter Your Choice: ";
        cin >> ch;
         
        switch (ch) {
            case 1:
                s.add();
                break;
            case 2:
                cout << "Enter the Element to be Deleted: ";
                cin >> key;
                s.delete1(key);
                break;
            case 3:
                cout << "Enter the Element to be Searched: ";
                cin >> key;
                s.search(key);
                break;
            case 4:
                s.display();
                break;
            case 5:
                s.union1();
                break;
            case 6:
                s.Intersection();
                break;
            case 7:
                s.Difference();
                break;
            case 8:
                s.size();
                break;
            case 9:
                s.subset();
                break;
            case 10:
                cout << "Exiting...\n";
                exit(0);
            default:
                cout << "Invalid Choice\n";
        }
    }
    return 0;
}

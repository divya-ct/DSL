#include <iostream>
using namespace std;

class Node {
public:
    string keyword;
    string meaning;
    Node* left;
    Node* right;

    Node(string key, string mean) {
        keyword = key;
        meaning = mean;
        left = right = nullptr;
    }
};

class Dictionary {
private:
    Node* root;

    Node* insert(Node* root, string key, string mean) {
        if (root == nullptr) {
            return new Node(key, mean);
        }
        if (key < root->keyword) {
            root->left = insert(root->left, key, mean);
        } else if (key > root->keyword) {
            root->right = insert(root->right, key, mean);
        } else {
            cout << "Keyword already exists!\n";
        }
        return root;
    }

    Node* findMin(Node* root) {
        while (root && root->left != nullptr) {
            root = root->left;
        }
        return root;
    }

    Node* deleteNode(Node* root, string key) {
        if (root == nullptr) return root;

        if (key < root->keyword) {
            root->left = deleteNode(root->left, key);
        } else if (key > root->keyword) {
            root->right = deleteNode(root->right, key);
        } else {
            // Node with one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            // Node with two children
            Node* temp = findMin(root->right);
            root->keyword = temp->keyword;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->keyword);
        }
        return root;
    }

    Node* update(Node* root, string key, string new_mean) {
        if (root == nullptr) {
            cout << "Keyword not found!\n";
            return nullptr;
        }
        if (key < root->keyword) {
            root->left = update(root->left, key, new_mean);
        } else if (key > root->keyword) {
            root->right = update(root->right, key, new_mean);
        } else {
            root->meaning = new_mean;
            cout << "Meaning updated successfully.\n";
        }
        return root;
    }

    void ascending(Node* root) {
        if (root == nullptr) return;
        ascending(root->left);
        cout << root->keyword << " : " << root->meaning << endl;
        ascending(root->right);
    }

    void descending(Node* root) {
        if (root == nullptr) return;
        descending(root->right);
        cout << root->keyword << " : " << root->meaning << endl;
        descending(root->left);
    }

    int search(Node* root, string key, int& comparisons) {
        if (root == nullptr) {
            return -1; // not found
        }
        comparisons++;
        if (key == root->keyword) {
            cout << "Meaning: " << root->meaning << endl;
            return 1;
        } else if (key < root->keyword) {
            return search(root->left, key, comparisons);
        } else {
            return search(root->right, key, comparisons);
        }
    }

    int height(Node* root) {
        if (root == nullptr) return 0;
        int lh = height(root->left);
        int rh = height(root->right);
        return 1 + max(lh, rh);
    }

public:
    Dictionary() {
        root = nullptr;
    }

    void add(string key, string mean) {
        root = insert(root, key, mean);
    }

    void deleteKey(string key) {
        root = deleteNode(root, key);
    }

    void updateMeaning(string key, string new_mean) {
        root = update(root, key, new_mean);
    }

    void displayAscending() {
        cout << "\nDictionary in Ascending order:\n";
        ascending(root);
    }

    void displayDescending() {
        cout << "\nDictionary in Descending order:\n";
        descending(root);
    }

    void find(string key) {
        int comparisons = 0;
        if (search(root, key, comparisons) == -1) {
            cout << "Keyword not found!\n";
        }
        cout << "Comparisons done: " << comparisons << endl;
    }

    void maxComparisons() {
        int h = height(root);
        cout << "Maximum comparisons needed = " << h << endl;
    }
};

int main() {
    Dictionary dict;
    int choice;
    string keyword, meaning;

    do {
        cout << "\n1. Add\n2. Delete\n3. Update\n4. Display Ascending\n5. Display Descending\n6. Search\n7. Max Comparisons\n8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            cin >> keyword;
            cout << "Enter meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.add(keyword, meaning);
            break;

        case 2:
            cout << "Enter keyword to delete: ";
            cin >> keyword;
            dict.deleteKey(keyword);
            break;

        case 3:
            cout << "Enter keyword to update: ";
            cin >> keyword;
            cout << "Enter new meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.updateMeaning(keyword, meaning);
            break;

        case 4:
            dict.displayAscending();
            break;

        case 5:
            dict.displayDescending();
            break;

        case 6:
            cout << "Enter keyword to search: ";
            cin >> keyword;
            dict.find(keyword);
            break;

        case 7:
            dict.maxComparisons();
            break;

        case 8:
            cout << "Exiting...\n";
            break;

        default:
            cout << "Invalid choice!\n";
        }

    } while (choice != 8);

    return 0;
}
